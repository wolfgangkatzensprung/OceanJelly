//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/TouchControlsInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControlsInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControlsInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControlsInput"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""871802b6-cae7-47f5-9276-6023a4be5740"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""e731e3f0-7d28-4c24-9fd2-d23964ad3bc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""aa39f48f-44c3-401b-afd5-ef5be40f88a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPress_PassThrough"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab72ba5f-98cd-470c-8345-c92cd391a0c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition_PassThrough"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e133130-ab4a-4f98-91b1-8d9db82117ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43a64c5f-6177-4c68-b66b-4561de458109"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap(duration=0.2,pressPoint=0.001)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe8c422-7900-46e6-a708-0ca5c23442a4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d97355a1-49f3-44bc-aaa2-836c61f67dcd"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress_PassThrough"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71704d5b-61a9-407c-8b3e-f4fc29561347"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition_PassThrough"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchPress = m_Touch.FindAction("TouchPress", throwIfNotFound: true);
        m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
        m_Touch_TouchPress_PassThrough = m_Touch.FindAction("TouchPress_PassThrough", throwIfNotFound: true);
        m_Touch_TouchPosition_PassThrough = m_Touch.FindAction("TouchPosition_PassThrough", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_TouchPress;
    private readonly InputAction m_Touch_TouchPosition;
    private readonly InputAction m_Touch_TouchPress_PassThrough;
    private readonly InputAction m_Touch_TouchPosition_PassThrough;
    public struct TouchActions
    {
        private @TouchControlsInput m_Wrapper;
        public TouchActions(@TouchControlsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress => m_Wrapper.m_Touch_TouchPress;
        public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
        public InputAction @TouchPress_PassThrough => m_Wrapper.m_Touch_TouchPress_PassThrough;
        public InputAction @TouchPosition_PassThrough => m_Wrapper.m_Touch_TouchPosition_PassThrough;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @TouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                @TouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                @TouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress;
                @TouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
                @TouchPress_PassThrough.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress_PassThrough;
                @TouchPress_PassThrough.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress_PassThrough;
                @TouchPress_PassThrough.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPress_PassThrough;
                @TouchPosition_PassThrough.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition_PassThrough;
                @TouchPosition_PassThrough.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition_PassThrough;
                @TouchPosition_PassThrough.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition_PassThrough;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchPress_PassThrough.started += instance.OnTouchPress_PassThrough;
                @TouchPress_PassThrough.performed += instance.OnTouchPress_PassThrough;
                @TouchPress_PassThrough.canceled += instance.OnTouchPress_PassThrough;
                @TouchPosition_PassThrough.started += instance.OnTouchPosition_PassThrough;
                @TouchPosition_PassThrough.performed += instance.OnTouchPosition_PassThrough;
                @TouchPosition_PassThrough.canceled += instance.OnTouchPosition_PassThrough;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchPress_PassThrough(InputAction.CallbackContext context);
        void OnTouchPosition_PassThrough(InputAction.CallbackContext context);
    }
}
